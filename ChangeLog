2013-02-28	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* eng-qbl.c: A new command line application that offers working
	with the English Kabbalah system interactively.

	* processing.c: listToString; Takes a list of words from a
	struct wordlist and returns that list as a string of words
	delimited by spaces. This eliminates the tedious need to
	constantly use quotes when inputting phrases on the command line.

2013-02-18	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* processing.c: generateWordList and generateWordListFromFile;
	generateWordList has been modified to grow an existing list of
	words from a given string each time it is used. generateWordList
	serves as an abstracton for generateWordListFromFile for a given
	filename. generateWordListFromFile can be called multiple times
	for every file provided.

2013-02-16  Marc Sylvestre  <marc.sylvestre@manhydra.com>

	* processing.c: New Wordlist Generation Functions; Created new
	functions (generateUniqueWordList, generatePhraseList,
	generateUniquePhraseList, clearWordList) for better efficiency
	of accessing and handling wordlists. generateLists has been
	renamed generateWordList to create raw, unsorted list of words
	to be used by the new functions.

2013-02-04  Marc Sylvestre  <marc.sylvestre@manhydra.com>

	* gematria.c, temurah.c, notarikon.c: Object Code Utility; files
	are now used only as object code modules where their execution
	are now performed by eq-gematria.c, eq-temurah.c, and
	eq-notarikon.c respectively.


2013-01-20	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* processing.c: Replaced charToLowerCase() to tolower();
	Switched from using charToLowerCase() to tolower(), frankly
	because this functionality exists within ctype.h of the Standard
	Library :P

2013-01-03	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* processing.c: Dynamic Allocation of Unsorted Words; Tokens
	from file buffer were stored to list of unsorted words on the
	stack, causing buffer overflow when accessed repeatedly. Tokens
	are now passed to strdup to be allocated on the heap.

2013-01-01	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* gematria.c: Minor Modification of Search Display; Prints
	theValue only when valueFlag and searchFlag are false (0).

	* processing.c: Modified Uppercase SCRIPT Tag Checking; Used
	charToLowerCase() incorrectly on literal characters. Should be
	used on characters of inputted string.

2012-12-09	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* configure.ac: Optional Feature Modified; Replaced
	--enable-curl with --with-curl as the former pertains to the use
	of an optional feature within the code whereas the latter
	pertains to the use of an optional package external of the
	software.

	* processing.c: Checking for Uppercase <SCRIPT> Tag; Added
	charToLowerCase() in case stripMarkupTags() finds <SCRIPT> tags
	in uppercase.

	* gematria.c, temurah.c, notarikon.c: Modified generateLists()
	Warning; Explicitly warns, whenever generateLists() is called,
	that if a given file is remote, to install libcurl.

2012-12-08	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* configure.ac: Optional Feature Added; Added --enable-curl
	(defaulted to "no") to avoid any dependency issue that may arise
	if building without libcurl.

2012-12-07	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* configure.ac: Canonical Host Check; Checks for host for which
	package is being built. Win32 hosts (MinGW) will check for
	libcurldll. All other POSIX hosts will check for libcurl.

	* processing.c: Using HAVE_LIBCURLDLL Macro; In connection with
	checking for libcurldll on MinGW hosts, assurance is needed to
	determine not only if cURL headers are available, but if either
	libcurl or libcurldll is present as well.

2012-12-06	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* processing.c: Further libcurl Conditioning; Added HAVE_LIBCURL
	macro after HAVE_CURL_CURL_H to ensure libcurl library is
	present along with curl/curl.h header. This is especially needed
	for building on Win32 systems with MinGW as the current
	construct of configure.ac only checks for the dynamically linked
	(shared) version of libcurl.

2012-12-06	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* processing.c: Repaired Defect in Remote File Processing;
	Because curlCallback() returned size of post-processed content,
	libcurl was not able to properly iterate through the content,
	thus only returning the first batch of retrieved content, which
	was why remote files appeared to have produced very little
	results, if any. By having curlCallback() returned the
	pre-processed size (realsize), it was able to accurately
	iternate, retrieving the content in its entirety.

2012-12-01	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* temurah.c: Excess newline removal; Removed the extra newline
	character whenever receiving word or phrase from stdin.

2012-11-12	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* processing.c: More memory optimization; because
	stripNonAlpha() and stripMarkupTags() return malloc'd addresses,
	it's best to have pointers other than fb->fbuffer to handle
	their processed text streams, then strncpy'd the finished
	product to a freshly malloc'd fb->fbuffer. This helps to free
	(nearly) all malloc'd memory when the programs are about to end.

2012-11-12	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* processing.c: Proper memory optimization; pointers returned by
	stripNonAlpha() and stripMarkupTags() have malloc'd addresses
	that were not being freed properly.

2012-11-10	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* processing.c: stripMarkupTags() modified to explicitly exclude
	not only <script> tags but all content preceding </script>.

2012-11-09	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* processing.c: generateLists(): Optimized collection and
	sorting; phrases are only collected and sorted if "ltype" is
	explicitly set to "phraselist". This will ensure faster result
	searches for words only.

2012-11-08	Marc Sylvestre	<marc.sylvestre@manhydra.com>

	* processing.c: Added libcurl to allow for searching results on
	remote files, web pages, etc.

	Created stripMarkupTags() to strips markup language tags (e.g.
	<body>, <div>, etc.) from hypertext documents.

	* processing.c: When processing web pages with elaborate XHTML
	markup design, an unexpected result causes malloc() in
	stripNonAlpha() and stripMarkupTags() to fail:

	malloc.c:3097: sYSMALLOc: Assertion `(old_top == (((mbinptr)
	(((char *) &((av)->bins[((1) - 1) * 2])) - __builtin_offsetof
	(struct malloc_chunk, fd)))) && old_size == 0) || ((unsigned
	long) (old_size) >= (unsigned long)((((__builtin_offsetof
	(struct malloc_chunk, fd_nextsize))+((2 * (sizeof(size_t))) -
	1)) & ~((2 * (sizeof(size_t))) - 1))) && ((old_top)->size & 0x1)
	&& ((unsigned long)old_end & pagemask) == 0)' failed.

	Using realloc() instead alleviates this.
